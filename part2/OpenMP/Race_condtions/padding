#include <omp.h> 
static long num_steps = 100000; double step; 
#define NUM_THREADS 2 
void main () 
{ double pi; step = 1.0/(double) num_steps; 
 omp_set_num_threads(NUM_THREADS); 
#pragma omp parallel 
{ 
 int i, id,nthrds; double x, sum; 
 id = omp_get_thread_num();
 nthrds = omp_get_num_threads();
 if (id == 0) nthreads = nthrds; 
 id = omp_get_thread_num(); 
 nthrds = omp_get_num_threads(); 
 for (i=id, sum=0.0;i< num_steps; i=i+nthreads){
 x = (i+0.5)*step; 
 sum += 4.0/(1.0+x*x); 
 } 
 pi += sum * step; 
} 
} 
"can you solve the race condition problem with padding"
#include <omp.h>

static long num_steps = 100000;
double step;
#define NUM_THREADS 2

struct alignas(64) ThreadData {
    double sum;
    char padding[64 - sizeof(double)];
};

int main() {
    double pi = 0.0;
    step = 1.0 / (double)num_steps;
    omp_set_num_threads(NUM_THREADS);

    #pragma omp parallel
    {
        int i, id, nthreads;
        double x;
        ThreadData localData{0.0};

        id = omp_get_thread_num();
        nthreads = omp_get_num_threads();

        for (i = id; i < num_steps; i += nthreads) {
            x = (i + 0.5) * step;
            localData.sum += 4.0 / (1.0 + x * x);
        }

        #pragma omp critical
        pi += localData.sum;
    }

    pi *= step;

    return 0;
}
